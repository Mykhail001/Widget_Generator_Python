"""
–ì–æ–ª–æ–≤–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ - —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–∏
"""
import sys
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QGroupBox, QGridLayout, QScrollArea, QTextEdit,
    QLabel, QSpinBox, QCheckBox, QComboBox, QMessageBox
)
from PyQt6.QtCore import Qt

from managers import TogglePatternManager, ButtonPatternManager, ButtonPresetManager
from .minecraft_button import MinecraftButton
from .minecraft_radio_button import MinecraftRadioButton, MinecraftRadioGroup
from .minecraft_toggle_button import MinecraftToggleButton
from .minecraft_slider import MinecraftSlider

class ButtonGenerator(QWidget):
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫
    """

    def __init__(self):
        super().__init__()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ
        self.current_widget_type = "button"
        self.current_config = {}
        self.preview_button = None
        self.preview_radio = None
        self.preview_radio2 = None
        self.preview_toggle = None
        self.preview_slider = None
        self.preview_group = None
        self.generated_buttons = []
        self.generated_radios = []
        self.generated_toggles = []
        self.generated_sliders = []
        self.code_dialog = None

        self.setup_ui()

    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        main_layout = QHBoxLayout()

        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_panel = self.create_settings_panel()
        main_layout.addWidget(left_panel, 1)

        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–≤'—é —Ç–∞ –≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏
        right_panel = self.create_preview_panel()
        main_layout.addWidget(right_panel, 2)

        self.setLayout(main_layout)
        self.setStyleSheet("background-color: #2C2C2C;")

        self.update_preview()

    def create_settings_panel(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        settings_widget = QWidget()
        settings_widget.setMaximumWidth(400)
        settings_widget.setStyleSheet("background-color: #3C3C3C; border-radius: 10px; padding: 10px; color: white;")
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("‚öôÔ∏è WIDGET CONFIGURATOR")
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #4CAF50; padding: 10px;")
        layout.addWidget(title)

        # –¢–∏–ø –≤—ñ–¥–∂–µ—Ç–∞
        widget_type_group = QGroupBox("üîò Widget Type")
        widget_type_layout = QGridLayout()  # –ó–º—ñ–Ω–µ–Ω–æ –∑ QHBoxLayout –Ω–∞ QGridLayout

        # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫: Button —Ç–∞ Radio Button
        self.button_radio = QCheckBox("Button")
        self.button_radio.setChecked(True)
        self.button_radio.toggled.connect(lambda checked: self.set_widget_type("button" if checked else self.get_other_widget_type("button")))
        widget_type_layout.addWidget(self.button_radio, 0, 0)

        self.radio_radio = QCheckBox("Radio Button")
        self.radio_radio.toggled.connect(lambda checked: self.set_widget_type("radio" if checked else self.get_other_widget_type("radio")))
        widget_type_layout.addWidget(self.radio_radio, 0, 1)

        # –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫: Toggle Switch —Ç–∞ Slider
        self.toggle_radio = QCheckBox("Toggle Switch")
        self.toggle_radio.toggled.connect(lambda checked: self.set_widget_type("toggle" if checked else self.get_other_widget_type("toggle")))
        widget_type_layout.addWidget(self.toggle_radio, 1, 0)

        self.slider_radio = QCheckBox("Slider")
        self.slider_radio.toggled.connect(lambda checked: self.set_widget_type("slider" if checked else self.get_other_widget_type("slider")))
        widget_type_layout.addWidget(self.slider_radio, 1, 1)

        widget_type_group.setLayout(widget_type_layout)
        layout.addWidget(widget_type_group)

        # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        basic_group = QGroupBox("üîß Basic Settings")
        basic_layout = QGridLayout()

        # –ú–∞—Å—à—Ç–∞–±
        basic_layout.addWidget(QLabel("Scale:"), 0, 0)
        self.scale_input = QSpinBox()
        self.scale_input.setRange(4, 16)
        self.scale_input.setValue(8)
        basic_layout.addWidget(self.scale_input, 0, 1)

        # –†–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–∫–∏ (–≤ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–∏—Ö –ø—ñ–∫—Å–µ–ª—è—Ö) - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
        self.size_label_width = QLabel("Button Width:")
        basic_layout.addWidget(self.size_label_width, 1, 0)
        self.width_input = QSpinBox()
        self.width_input.setRange(4, 32)
        self.width_input.setValue(16)
        basic_layout.addWidget(self.width_input, 1, 1)

        self.size_label_height = QLabel("Button Height:")
        basic_layout.addWidget(self.size_label_height, 2, 0)
        self.height_input = QSpinBox()
        self.height_input.setRange(4, 32)
        self.height_input.setValue(15)
        basic_layout.addWidget(self.height_input, 2, 1)

        # –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è —Å–ª–∞–π–¥–µ—Ä–∞
        self.orientation_label = QLabel("Orientation:")
        basic_layout.addWidget(self.orientation_label, 3, 0)
        self.orientation_combo = QComboBox()
        self.orientation_combo.addItems(["Vertical", "Horizontal"])
        self.orientation_combo.currentTextChanged.connect(self.update_preview)
        basic_layout.addWidget(self.orientation_combo, 3, 1)

        # –î–æ–≤–∂–∏–Ω–∞ —Å–ª–∞–π–¥–µ—Ä–∞
        self.slider_length_label = QLabel("Track Length:")
        basic_layout.addWidget(self.slider_length_label, 4, 0)
        self.slider_length_input = QSpinBox()
        self.slider_length_input.setRange(10, 60)
        self.slider_length_input.setValue(30)
        self.slider_length_input.valueChanged.connect(self.update_preview)
        basic_layout.addWidget(self.slider_length_input, 4, 1)

        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.orientation_label.hide()
        self.orientation_combo.hide()
        self.slider_length_label.hide()
        self.slider_length_input.hide()

        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        self.scale_input.valueChanged.connect(self.update_preview)
        self.width_input.valueChanged.connect(self.update_preview)
        self.height_input.valueChanged.connect(self.update_preview)

        basic_group.setLayout(basic_layout)
        layout.addWidget(basic_group)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–∏–ø –≤—ñ–¥–∂–µ—Ç–∞ (–ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤)
        self.set_widget_type("button")

        # –ü—Ä–µ—Å–µ—Ç–∏
        preset_group = QGroupBox("üé® Style Presets")
        preset_layout = QVBoxLayout()

        self.preset_combo = QComboBox()
        self.preset_combo.addItems(ButtonPresetManager.get_presets().keys())
        self.preset_combo.currentTextChanged.connect(self.apply_preset)
        preset_layout.addWidget(self.preset_combo)

        preset_group.setLayout(preset_layout)
        layout.addWidget(preset_group)

        # –ü–∞—Ç–µ—Ä–Ω–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è toggle switch)
        self.pattern_group = QGroupBox("üé® Toggle Patterns")
        pattern_layout = QVBoxLayout()

        self.pattern_combo = QComboBox()
        self.pattern_combo.addItems(TogglePatternManager.get_patterns().keys())
        self.pattern_combo.setCurrentText('Standard')  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.pattern_combo.currentTextChanged.connect(self.apply_pattern)
        pattern_layout.addWidget(self.pattern_combo)

        self.pattern_group.setLayout(pattern_layout)
        layout.addWidget(self.pattern_group)
        self.pattern_group.hide()  # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π

        # –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è button)
        self.button_pattern_group = QGroupBox("üé® Button Patterns")
        button_pattern_layout = QVBoxLayout()

        self.button_pattern_combo = QComboBox()
        self.button_pattern_combo.addItems(ButtonPatternManager.get_patterns().keys())
        self.button_pattern_combo.setCurrentText('None')  # –ë–µ–∑ –ø–∞—Ç–µ—Ä–Ω—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.button_pattern_combo.currentTextChanged.connect(self.apply_button_pattern)
        button_pattern_layout.addWidget(self.button_pattern_combo)

        self.button_pattern_group.setLayout(button_pattern_layout)
        layout.addWidget(self.button_pattern_group)
        self.button_pattern_group.show()  # –ü–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

        # –û–ø—Ü—ñ—ó
        options_group = QGroupBox("‚ö° Options")
        options_layout = QVBoxLayout()

        self.animation_check = QCheckBox("Enable Press Animation")
        self.animation_check.setChecked(True)
        options_layout.addWidget(self.animation_check)

        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ checkboxes
        self.animation_check.toggled.connect(self.update_preview)

        options_group.setLayout(options_layout)
        layout.addWidget(options_group)

        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        actions_layout = QVBoxLayout()

        generate_btn = QPushButton("üî® Generate Widget")
        generate_btn.setStyleSheet("background-color: #4CAF50; padding: 10px; font-weight: bold;")
        generate_btn.clicked.connect(self.generate_widget)
        actions_layout.addWidget(generate_btn)

        save_preset_btn = QPushButton("üíæ Save Preset")
        save_preset_btn.clicked.connect(self.save_preset)
        actions_layout.addWidget(save_preset_btn)

        export_code_btn = QPushButton("üìÑ Export Code")
        export_code_btn.clicked.connect(self.export_code)
        actions_layout.addWidget(export_code_btn)

        layout.addLayout(actions_layout)
        layout.addStretch()

        settings_widget.setLayout(layout)
        return settings_widget

    def create_preview_panel(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –ø—Ä–µ–≤—å—é"""
        preview_widget = QWidget()
        layout = QVBoxLayout()

        # –ü—Ä–µ–≤—å—é
        preview_group = QGroupBox("üëÅÔ∏è LIVE PREVIEW")
        preview_group.setStyleSheet("QGroupBox { color: white;}")
        preview_layout = QVBoxLayout()
        preview_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.preview_container = QWidget()
        self.preview_container.setFixedSize(400, 200)  # –ó–±—ñ–ª—å—à—É—î–º–æ —à–∏—Ä–∏–Ω—É —è–∫ —É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
        self.preview_container.setStyleSheet("background-color: #CBCCD4;")
        preview_layout.addWidget(self.preview_container)

        preview_group.setLayout(preview_layout)
        layout.addWidget(preview_group)

        # –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏
        generated_group = QGroupBox("üè≠ GENERATED WIDGETS")
        generated_group.setStyleSheet("QGroupBox { color: white;}")

        self.scroll_area = QScrollArea()
        self.scroll_content = QWidget()
        self.scroll_layout = QGridLayout(self.scroll_content)
        self.scroll_area.setWidget(self.scroll_content)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setStyleSheet("background-color: #CBCCD4;")

        generated_layout = QVBoxLayout()
        generated_layout.addWidget(self.scroll_area)

        clear_btn = QPushButton("üóëÔ∏è Clear All")
        clear_btn.setStyleSheet("QPushButton { color: white; background-color: #9A9FB4; border: 1px solid #ADB0C4; padding: 5px; }")
        clear_btn.clicked.connect(self.clear_generated_buttons)
        generated_layout.addWidget(clear_btn)

        generated_group.setLayout(generated_layout)
        layout.addWidget(generated_group)

        preview_widget.setLayout(layout)
        return preview_widget

    def get_other_widget_type(self, unchecked_type):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—à–∏–π —Ç–∏–ø –≤—ñ–¥–∂–µ—Ç–∞ –∫–æ–ª–∏ –æ–¥–∏–Ω –±—É–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        checkboxes = {
            "button": self.button_radio,
            "radio": self.radio_radio,
            "toggle": self.toggle_radio,
            "slider": self.slider_radio
        }

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –≤–∏–±—Ä–∞–Ω–∏–π checkbox (–∫—Ä—ñ–º —Ç–æ–≥–æ —â–æ –±—É–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π)
        for widget_type, checkbox in checkboxes.items():
            if widget_type != unchecked_type and checkbox.isChecked():
                return widget_type
        return "button"

    def set_widget_type(self, widget_type):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É –≤—ñ–¥–∂–µ—Ç–∞"""
        if widget_type != self.current_widget_type:
            self.current_widget_type = widget_type

            # –û–Ω–æ–≤–ª—é—î–º–æ checkboxes (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π)
            self.button_radio.setChecked(widget_type == "button")
            self.radio_radio.setChecked(widget_type == "radio")
            self.toggle_radio.setChecked(widget_type == "toggle")
            self.slider_radio.setChecked(widget_type == "slider")

            # –ü–æ–∫–∞–∑—É—î–º–æ/–ø—Ä–∏—Ö–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
            if widget_type == "button":
                # –î–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
                self.size_label_width.show()
                self.size_label_height.show()
                self.width_input.show()
                self.height_input.show()
                self.orientation_label.hide()
                self.orientation_combo.hide()
                self.slider_length_label.hide()
                self.slider_length_input.hide()
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –¥–ª—è toggle
                self.button_pattern_group.show()
                self.pattern_group.hide()
            elif widget_type == "radio":
                # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫
                self.size_label_width.hide()
                self.size_label_height.hide()
                self.width_input.hide()
                self.height_input.hide()
                self.orientation_label.hide()
                self.orientation_combo.hide()
                self.slider_length_label.hide()
                self.slider_length_input.hide()
                # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è radio
                self.button_pattern_group.hide()
                self.pattern_group.hide()
            elif widget_type == "toggle":
                # –î–ª—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
                self.size_label_width.hide()
                self.size_label_height.hide()
                self.width_input.hide()
                self.height_input.hide()
                self.orientation_label.hide()
                self.orientation_combo.hide()
                self.slider_length_label.hide()
                self.slider_length_input.hide()
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è toggle switch, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                self.button_pattern_group.hide()
                self.pattern_group.show()
            elif widget_type == "slider":
                # –î–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏, –ø–æ–∫–∞–∑—É—î–º–æ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é —Ç–∞ –¥–æ–≤–∂–∏–Ω—É
                self.size_label_width.hide()
                self.size_label_height.hide()
                self.width_input.hide()
                self.height_input.hide()
                self.orientation_label.show()
                self.orientation_combo.show()
                self.slider_length_label.show()
                self.slider_length_input.show()
                # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –ø–∞—Ç–µ—Ä–Ω–∏
                self.button_pattern_group.hide()
                self.pattern_group.hide()

            self.update_preview()

    def update_preview(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤—ñ–¥–∂–µ—Ç–∞"""
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –≤—ñ–¥–∂–µ—Ç–∏
        if self.preview_button:
            self.preview_button.deleteLater()
            self.preview_button = None
        if self.preview_radio:
            self.preview_radio.deleteLater()
            self.preview_radio = None
        if self.preview_radio2:
            self.preview_radio2.deleteLater()
            self.preview_radio2 = None
        if self.preview_toggle:
            self.preview_toggle.deleteLater()
            self.preview_toggle = None
        if self.preview_slider:
            self.preview_slider.deleteLater()
            self.preview_slider = None

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –≤—ñ–¥–∂–µ—Ç–∞
        if self.current_widget_type == "button":
            config = {
                'button_width': self.width_input.value(),
                'button_height': self.height_input.value(),
                'scale': self.scale_input.value(),
                'animation_enabled': self.animation_check.isChecked(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É –±–µ–∑ —Ç–µ–∫—Å—Ç—É
            self.preview_button = MinecraftButton('', config, self.preview_container)

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω
            button_pattern_name = self.button_pattern_combo.currentText()
            self.preview_button.set_pattern(button_pattern_name)

            self.preview_button.move(
                (self.preview_container.width() - self.preview_button.width()) // 2,
                (self.preview_container.height() - self.preview_button.height()) // 2
            )
            self.preview_button.show()

        elif self.current_widget_type == "radio":
            config = {
                'text': "",  # –ë–µ–∑ —Ç–µ–∫—Å—Ç—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
                'scale': self.scale_input.value(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤–∞ —Ä–∞–¥—ñ–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
            self.preview_radio = MinecraftRadioButton("", config, self.preview_container)
            self.preview_radio2 = MinecraftRadioButton("", config, self.preview_container)

            # –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ —ó—Ö –ø–æ—Ä—É—á
            radio_spacing = 20
            total_width = self.preview_radio.width() * 2 + radio_spacing
            start_x = (self.preview_container.width() - total_width) // 2
            y_pos = (self.preview_container.height() - self.preview_radio.height()) // 2

            self.preview_radio.move(start_x, y_pos)
            self.preview_radio2.move(start_x + self.preview_radio.width() + radio_spacing, y_pos)

            # –û–¥–∏–Ω –≤–∏–±—Ä–∞–Ω–∏–π, –¥—Ä—É–≥–∏–π –Ω—ñ
            self.preview_radio.set_selected(True)
            self.preview_radio2.set_selected(False)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
            self.preview_group = MinecraftRadioGroup()
            self.preview_group.add_radio_button(self.preview_radio)
            self.preview_group.add_radio_button(self.preview_radio2)

            self.preview_radio.show()
            self.preview_radio2.show()

        elif self.current_widget_type == "toggle":
            config = {
                'scale': self.scale_input.value(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞—á (–±–µ–∑ —Ç–µ–∫—Å—Ç—É)
            self.preview_toggle = MinecraftToggleButton(config, self.preview_container)

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω
            pattern_name = self.pattern_combo.currentText()
            self.preview_toggle.set_pattern(pattern_name)

            self.preview_toggle.move(
                (self.preview_container.width() - self.preview_toggle.width()) // 2,
                (self.preview_container.height() - self.preview_toggle.height()) // 2
            )
            self.preview_toggle.show()

        elif self.current_widget_type == "slider":
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥–ª–æ–∂–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó
            orientation = self.orientation_combo.currentText().lower()
            track_length = self.slider_length_input.value()

            if orientation == 'vertical':
                track_width = 6      # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞
                track_height = track_length  # –ó–º—ñ–Ω–Ω–∞ –≤–∏—Å–æ—Ç–∞
            else:  # horizontal
                track_width = track_length   # –ó–º—ñ–Ω–Ω–∞ —à–∏—Ä–∏–Ω–∞
                track_height = 6     # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∏—Å–æ—Ç–∞

            config = {
                'scale': self.scale_input.value(),
                'orientation': orientation,
                'track_width': track_width,
                'track_height': track_height,
                'has_shadow': True,
                'slider_button_config': {
                    'button_width': 8,
                    'button_height': 6,
                    'scale': self.scale_input.value(),
                    'border_color': '#413F54',
                    'animation_enabled': False
                }
            }

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∏–ª—ñ –∑ –ø—Ä–µ—Å–µ—Ç—É
            if self.current_config:
                button_config = config['slider_button_config']

                if 'button_normal' in self.current_config:
                    button_config['button_normal'] = self.current_config['button_normal']
                    button_config['button_hover'] = self.current_config['button_normal']
                    button_config['button_pressed'] = self.current_config['button_normal']

                if 'border_normal' in self.current_config:
                    button_config['border_normal'] = self.current_config['border_normal']
                    button_config['border_hover'] = self.current_config['border_normal']
                    button_config['border_pressed'] = self.current_config['border_normal']

                if 'bottom_normal' in self.current_config:
                    button_config['bottom_normal'] = self.current_config['bottom_normal']
                    button_config['bottom_hover'] = self.current_config['bottom_normal']
                    button_config['bottom_pressed'] = self.current_config['bottom_normal']

                if 'button_normal' in self.current_config:
                    config['track_fill_color'] = self.current_config['button_normal']

            self.preview_slider = MinecraftSlider(config, self.preview_container)
            self.preview_slider.set_value(0.5)

            self.preview_slider.move(
                (self.preview_container.width() - self.preview_slider.width()) // 2,
                (self.preview_container.height() - self.preview_slider.height()) // 2
            )
            self.preview_slider.show()

    def apply_preset(self, preset_name):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É"""
        presets = ButtonPresetManager.get_presets()
        if preset_name in presets:
            self.current_config.update(presets[preset_name])
            self.update_preview()

    def apply_pattern(self, pattern_name):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É –¥–ª—è toggle switch"""
        if self.current_widget_type == "toggle" and self.preview_toggle:
            self.preview_toggle.set_pattern(pattern_name)
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–µ–≤—å—é
            self.update_preview()

    def apply_button_pattern(self, pattern_name):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        if self.current_widget_type == "button" and self.preview_button:
            self.preview_button.set_pattern(pattern_name)
            # –ü–∞—Ç–µ—Ä–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –±–µ–∑ –ø–æ–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é

    def generate_widget(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–∂–µ—Ç–∞"""
        if self.current_widget_type == "button":
            config = {
                'button_width': self.width_input.value(),
                'button_height': self.height_input.value(),
                'scale': self.scale_input.value(),
                'animation_enabled': self.animation_check.isChecked(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –±–µ–∑ —Ç–µ–∫—Å—Ç—É
            button = MinecraftButton('', config)

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω
            button_pattern_name = self.button_pattern_combo.currentText()
            button.set_pattern(button_pattern_name)

            button.clicked.connect(lambda: print("Button clicked!"))

            # –î–æ–¥–∞—î–º–æ –¥–æ —Å—ñ—Ç–∫–∏
            item_count = self.scroll_layout.count()
            row = item_count // 4
            col = item_count % 4
            self.scroll_layout.addWidget(button, row, col)

            self.generated_buttons.append(button)

        elif self.current_widget_type == "radio":
            config = {
                'text': "",  # –ë–µ–∑ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫
                'scale': self.scale_input.value(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤—ñ —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–∫–∏
            radio1 = MinecraftRadioButton("", config)
            radio2 = MinecraftRadioButton("", config)

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≥—Ä—É–ø—É
            radio_group = MinecraftRadioGroup()
            radio_group.add_radio_button(radio1)
            radio_group.add_radio_button(radio2)

            # –û–¥–∏–Ω –≤–∏–±—Ä–∞–Ω–∏–π, –¥—Ä—É–≥–∏–π –Ω—ñ
            radio1.set_selected(True)
            radio2.set_selected(False)

            # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            radio1.clicked.connect(lambda: print("Radio 1 clicked!"))
            radio2.clicked.connect(lambda: print("Radio 2 clicked!"))
            radio1.stateChanged.connect(lambda selected: print(f"Radio 1 {'selected' if selected else 'deselected'}"))
            radio2.stateChanged.connect(lambda selected: print(f"Radio 2 {'selected' if selected else 'deselected'}"))

            # –î–æ–¥–∞—î–º–æ –¥–æ —Å—ñ—Ç–∫–∏ (–ø–æ—Ä—É—á –æ–¥–∏–Ω –∑ –æ–¥–Ω–∏–º)
            item_count = self.scroll_layout.count()
            row = item_count // 4
            col = item_count % 4

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–≤–æ—Ö —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫
            radio_container = QWidget()
            radio_layout = QHBoxLayout(radio_container)
            radio_layout.setSpacing(10)
            radio_layout.setContentsMargins(0, 0, 0, 0)
            radio_layout.addWidget(radio1)
            radio_layout.addWidget(radio2)

            self.scroll_layout.addWidget(radio_container, row, col)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ –≥—Ä—É–ø—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            self.generated_radios.extend([radio_container, radio_group])

        elif self.current_widget_type == "toggle":
            config = {
                'scale': self.scale_input.value(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞—á (–±–µ–∑ —Ç–µ–∫—Å—Ç—É)
            toggle = MinecraftToggleButton(config)

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω
            pattern_name = self.pattern_combo.currentText()
            toggle.set_pattern(pattern_name)

            toggle.clicked.connect(lambda: print("Toggle clicked!"))
            toggle.stateChanged.connect(lambda toggled: print(f"Toggle {'ON' if toggled else 'OFF'}"))

            # –î–æ–¥–∞—î–º–æ –¥–æ —Å—ñ—Ç–∫–∏
            item_count = self.scroll_layout.count()
            row = item_count // 4
            col = item_count % 4
            self.scroll_layout.addWidget(toggle, row, col)

            self.generated_toggles.append(toggle)

        elif self.current_widget_type == "slider":
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥–ª–æ–∂–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó
            orientation = self.orientation_combo.currentText().lower()
            track_length = self.slider_length_input.value()

            if orientation == 'vertical':
                track_width = 6      # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞
                track_height = track_length  # –ó–º—ñ–Ω–Ω–∞ –≤–∏—Å–æ—Ç–∞
            else:  # horizontal
                track_width = track_length   # –ó–º—ñ–Ω–Ω–∞ —à–∏—Ä–∏–Ω–∞
                track_height = 6     # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∏—Å–æ—Ç–∞

            config = {
                'scale': self.scale_input.value(),
                'orientation': orientation,
                'track_width': track_width,
                'track_height': track_height,
                'has_shadow': True,
                'slider_button_config': {
                    'button_width': 8,
                    'button_height': 6,
                    'scale': self.scale_input.value(),
                    'border_color': '#413F54',
                    'animation_enabled': False,
                    'button_normal': '#9A9FB4',
                    'button_hover': '#9A9FB4',
                    'button_pressed': '#9A9FB4',
                    'border_normal': '#ADB0C4',
                    'border_hover': '#ADB0C4',
                    'border_pressed': '#ADB0C4',
                    'bottom_normal': '#9A9FB4',
                    'bottom_hover': '#9A9FB4',
                    'bottom_pressed': '#9A9FB4',
                    'text_color': 'white',
                    'font_family': 'Minecraftia',
                    'has_shadow': True
                },
                'track_border_color': '#F2F2F2',
                'track_fill_color': '#9A9FB4'
            }

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∏–ª—ñ –∑ –ø—Ä–µ—Å–µ—Ç—É
            if self.current_config:
                button_config = config['slider_button_config']

                if 'button_normal' in self.current_config:
                    button_config['button_normal'] = self.current_config['button_normal']
                    button_config['button_hover'] = self.current_config['button_normal']
                    button_config['button_pressed'] = self.current_config['button_normal']

                if 'border_normal' in self.current_config:
                    button_config['border_normal'] = self.current_config['border_normal']
                    button_config['border_hover'] = self.current_config['border_normal']
                    button_config['border_pressed'] = self.current_config['border_normal']

                if 'bottom_normal' in self.current_config:
                    button_config['bottom_normal'] = self.current_config['bottom_normal']
                    button_config['bottom_hover'] = self.current_config['bottom_normal']
                    button_config['bottom_pressed'] = self.current_config['bottom_normal']

                if 'button_normal' in self.current_config:
                    config['track_fill_color'] = self.current_config['button_normal']

                if 'border_color' in self.current_config:
                    button_config['border_color'] = self.current_config['border_color']

                config['track_border_color'] = '#F2F2F2'

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–∞–π–¥–µ—Ä
            slider = MinecraftSlider(config)
            slider.set_value(0.5)

            # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            slider.valueChanged.connect(lambda value: print(f"Slider value: {value:.2f}"))

            def on_slider_change(value):
                percentage = int(value * 100)
                length_info = f"length {track_length}px"
                print(f"Slider {orientation} ({length_info}): {percentage}%")

            slider.valueChanged.connect(on_slider_change)

            # –î–æ–¥–∞—î–º–æ –¥–æ —Å—ñ—Ç–∫–∏
            item_count = self.scroll_layout.count()
            row = item_count // 4
            col = item_count % 4
            self.scroll_layout.addWidget(slider, row, col)

            self.generated_sliders.append(slider)

            print(f"Generated {orientation} slider (length: {track_length}px) with {self.preset_combo.currentText()} preset")

    def clear_generated_buttons(self):
        """–û—á–∏—â–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑—ñ scroll_layout
        for i in reversed(range(self.scroll_layout.count())):
            item = self.scroll_layout.itemAt(i)
            if item:
                widget = item.widget()
                if widget:
                    widget.deleteLater()

        self.generated_buttons.clear()
        self.generated_radios.clear()
        self.generated_toggles.clear()
        self.generated_sliders.clear()

    def save_preset(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É"""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        QMessageBox.information(self, "Info", "Preset saved! (Demo)")

    def export_code(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –∫–æ–¥—É"""
        if self.current_widget_type == "button":
            config = {
                'button_width': self.width_input.value(),
                'button_height': self.height_input.value(),
                'scale': self.scale_input.value(),
                'animation_enabled': self.animation_check.isChecked(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)
            button_pattern_name = self.button_pattern_combo.currentText()

            code = f'''# Generated Minecraft Button Code (without text)
button_config = {config}
button = MinecraftButton("", button_config)

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É
button.set_pattern("{button_pattern_name}")

button.clicked.connect(lambda: print("Button clicked!"))
'''
        elif self.current_widget_type == "radio":
            config = {
                'text': "",  # –ë–µ–∑ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫
                'scale': self.scale_input.value(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)

            code = f'''# Generated Minecraft Radio Buttons Code
radio_config = {config}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–æ—Ö —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫
radio1 = MinecraftRadioButton("", radio_config)
radio2 = MinecraftRadioButton("", radio_config)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫ (—Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–±—Ä–∞–Ω–∞)
radio_group = MinecraftRadioGroup()
radio_group.add_radio_button(radio1)
radio_group.add_radio_button(radio2)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
radio1.set_selected(True)
radio2.set_selected(False)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
radio1.clicked.connect(lambda: print("Radio 1 clicked!"))
radio2.clicked.connect(lambda: print("Radio 2 clicked!"))
radio1.stateChanged.connect(lambda selected: print(f"Radio 1 {{''selected'' if selected else ''deselected''}}"))
radio2.stateChanged.connect(lambda selected: print(f"Radio 2 {{''selected'' if selected else ''deselected''}}"))
'''
        elif self.current_widget_type == "toggle":
            config = {
                'scale': self.scale_input.value(),
                'has_shadow': True  # –ó–∞–≤–∂–¥–∏ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
            }
            config.update(self.current_config)
            pattern_name = self.pattern_combo.currentText()

            code = f'''# Generated Minecraft Toggle Switch Code
toggle_config = {config}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç—É)
toggle = MinecraftToggleButton(toggle_config)

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É
toggle.set_pattern("{pattern_name}")

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–º–∫–Ω–µ–Ω–æ)
toggle.set_toggled(False)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
toggle.clicked.connect(lambda: print("Toggle clicked!"))
toggle.stateChanged.connect(lambda toggled: print(f"Toggle {{''ON'' if toggled else ''OFF''}}"))

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É
if toggle.is_toggled():
    print("Toggle is ON")
else:
    print("Toggle is OFF")
'''
        elif self.current_widget_type == "slider":
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ–¥–ª–æ–∂–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó
            orientation = self.orientation_combo.currentText().lower()
            track_length = self.slider_length_input.value()

            if orientation == 'vertical':
                track_width = 6
                track_height = track_length
            else:  # horizontal
                track_width = track_length
                track_height = 6

            config = {
                'scale': self.scale_input.value(),
                'orientation': orientation,
                'track_width': track_width,
                'track_height': track_height,
                'has_shadow': True,
                'slider_button_config': {
                    'button_width': 8,
                    'button_height': 6,
                    'scale': self.scale_input.value(),
                    'border_color': '#413F54',
                    'animation_enabled': False,
                    'button_normal': '#9A9FB4',
                    'button_hover': '#9A9FB4',
                    'button_pressed': '#9A9FB4',
                    'border_normal': '#ADB0C4',
                    'border_hover': '#ADB0C4',
                    'border_pressed': '#ADB0C4',
                    'bottom_normal': '#9A9FB4',
                    'bottom_hover': '#9A9FB4',
                    'bottom_pressed': '#9A9FB4',
                    'text_color': 'white',
                    'font_family': 'Minecraftia',
                    'has_shadow': True
                },
                'track_border_color': '#F2F2F2',
                'track_fill_color': '#9A9FB4'
            }

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∏–ª—ñ –∑ –ø—Ä–µ—Å–µ—Ç—É
            if self.current_config:
                button_config = config['slider_button_config']

                if 'button_normal' in self.current_config:
                    button_config['button_normal'] = self.current_config['button_normal']
                    button_config['button_hover'] = self.current_config['button_normal']
                    button_config['button_pressed'] = self.current_config['button_normal']

                if 'border_normal' in self.current_config:
                    button_config['border_normal'] = self.current_config['border_normal']
                    button_config['border_hover'] = self.current_config['border_normal']
                    button_config['border_pressed'] = self.current_config['border_normal']

                if 'bottom_normal' in self.current_config:
                    button_config['bottom_normal'] = self.current_config['bottom_normal']
                    button_config['bottom_hover'] = self.current_config['bottom_normal']
                    button_config['bottom_pressed'] = self.current_config['bottom_normal']

                if 'button_normal' in self.current_config:
                    config['track_fill_color'] = self.current_config['button_normal']

            preset_name = self.preset_combo.currentText()

            code = f'''# Generated Minecraft Slider Code
# Preset: {preset_name}
# Orientation: {orientation}
# Track Length: {track_length} proportional pixels

slider_config = {config}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞
slider = MinecraftSlider(slider_config)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è (50%)
slider.set_value(0.5)

# –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω –∑–Ω–∞—á–µ–Ω–Ω—è
slider.valueChanged.connect(lambda value: print(f"Slider value: {{value:.2f}}"))

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
current_value = slider.get_value()
print(f"Current value: {{current_value:.2f}}")

# –ü—Ä–æ–≥—Ä–∞–º–Ω–∞ –∑–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è
slider.set_value(0.75)  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞ 75%

# –ó–º—ñ–Ω–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
slider.set_orientation("{orientation}")  # "vertical" –∞–±–æ "horizontal"

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
def on_slider_changed(value):
    print(f"Slider {{'{orientation}'}} (length: {track_length}px): {{value:.2f}} ({{value*100:.0f}}%)")

slider.valueChanged.connect(on_slider_changed)
'''

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–¥ —É –¥—ñ–∞–ª–æ–∑—ñ
        dialog = QWidget()
        dialog.setWindowTitle("Generated Code")
        dialog.setGeometry(200, 200, 600, 400)
        layout = QVBoxLayout()

        code_text = QTextEdit()
        code_text.setPlainText(code)
        code_text.setStyleSheet("background-color: #F5F5F5; color: #000000; font-family: monospace;")
        layout.addWidget(code_text)

        dialog.setLayout(layout)
        dialog.show()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –¥—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∏–∫
        self.code_dialog = dialog